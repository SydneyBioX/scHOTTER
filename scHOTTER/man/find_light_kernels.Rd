% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/light_kernels.R
\name{find_light_kernels}
\alias{find_light_kernels}
\title{Identify "light" kernels with too few unique points}
\usage{
find_light_kernels(overlapping_list, membership_matrix)
}
\arguments{
\item{overlapping_list}{A named list where each element \code{overlapping_list[[k]]}
is a character vector of kernel names that overlap kernel \code{k}. See
\code{\link{determine_overlaps}}.}

\item{membership_matrix}{A 0/1 matrix (preferably \code{Matrix::dgCMatrix})
of pointâ€“kernel memberships with rows = points, cols = kernels.}
}
\value{
A character vector of kernel names deemed "light".
}
\description{
Flags kernels that don't have enough assigned points relative to how many
other kernels they overlap with. The criterion used is
\code{num_points < num_overlaps}, where \code{num_points} is the column sum
of the (0/1) membership matrix and \code{num_overlaps} is the length of the
overlap set for that kernel (typically including itself).
}
\details{
This function assumes the overlap list includes each kernel itself (as produced
by \code{determine_overlaps()}). If you supply an overlap list that excludes
self, the threshold will be one smaller; adjust upstream if needed.
}
\examples{
set.seed(1)
coords  <- cbind(runif(40), runif(40))
centres <- generate_kernel_centres_by_density(coords, span = 0.2)
W       <- generate_weight_matrix_euclidean(coords, centres, span = 0.2, type = "block")
Memb    <- generate_membership_matrix(W)
ovl     <- determine_overlaps(Memb)
find_light_kernels(ovl, Memb)

}
